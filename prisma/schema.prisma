// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  avatarImg      String?
  name           String?
  password       String
  postDonasi     PostDonasi[]
  postBlog       Blog[]
  commentsDonasi CommentsDonasi[]
  commentsBlog   CommentsBlog[]
  savedPost      savedPost[]
  savedBlog      savedBlog[]
  likes          LikePostDonasi[]
  likesBlog      LikeBlog[]
}

model PostDonasi {
  id            String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  slug          String           @unique
  title         String
  description   String?          @db.LongText
  bannerImg     String?
  linkForm      String?
  published     Boolean          @default(false)
  author        User?            @relation(fields: [authorId], references: [id])
  authorId      String?
  comments      CommentsDonasi[]
  saved         savedPost[]
  likes         LikePostDonasi[]
  savedCount    Int              @default(0)
  commentsCount Int              @default(0)
  likedCount    Int              @default(0)

  @@index([authorId])
}

model CommentsDonasi {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comment   String
  post      PostDonasi @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?

  @@index([postId])
  @@index([authorId])
}

model Blog {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  slug          String         @unique
  title         String
  body          String?        @db.LongText
  bannerImg     String?
  published     Boolean        @default(false)
  author        User?          @relation(fields: [authorId], references: [id])
  authorId      String?
  comments      CommentsBlog[]
  saved         savedBlog[]
  likes         LikeBlog[]
  savedCount    Int            @default(0)
  commentsCount Int            @default(0)
  likedCount    Int            @default(0)

  @@index([authorId])
}

model CommentsBlog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade )
  blogId    String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?

  @@index([blogId])
  @@index([authorId])
}

model savedPost {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  post      PostDonasi @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  @@index([postId])
  @@index([userId])
}

model savedBlog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([blogId])
  @@index([userId])
}

model LikePostDonasi {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  post      PostDonasi @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  @@index([postId])
  @@index([userId])
}

model LikeBlog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  @@index([blogId])
  @@index([userId])
}
